<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\Modules\Translate
 * @copyright   Copyright (c) 2024, WeCodeArt Framework
 * @since 		6.5.5
 * @version		6.5.5
 */

namespace WeCodeArt\Support\Modules;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\{ Singleton, Integration };
use WeCodeArt\Gutenberg\Blocks\Dynamic;
use WeCodeArt\Config\Traits\No_Conditionals;
use function WeCodeArt\Functions\{ get_prop, toJSON };

/**
 * The Translate object.
 */
final class Translate extends Dynamic implements Integration {
    use Singleton;
	use No_Conditionals;

	/**
	 * Block namespace.
	 *
	 * @var string
	 */
	protected $block_name = 'translate';
	
	/**
	 * Hooks
	 */
	public function register_hooks(): void {
        \add_action( 'init',								[ $this, 'register_block'	], 20, 1 );
        \add_action( 'init',								[ $this, 'add_cookies'		], 20, 1 );
		\add_filter( 'wecodeart/filter/gutenberg/settings',	[ $this, 'add_translations'	], 20, 2 );
	} 

	/**
	 * Register.
	 *
	 * @return  void
	 */
	public function register_block(): void {
		\register_block_type_from_metadata( dirname( __FILE__ ) . '/translate-block.json', [
			'render_callback'   => [ $this, 'render' ],
		]  );
	}

    /**
	 * Dynamically renders the `wecodeart/translate` block.
	 *
	 * @param 	array 	$attributes	The attributes.
	 * @param 	string 	$content 	The block markup.
	 *
	 * @return 	string 	The block markup.
	 */
	public function render( array $attributes = [], string $content = '' ): string {
		require_once ABSPATH . 'wp-admin/includes/translation-install.php';

		$choices 		= [];
		$current_lang 	= get_prop( wp_get_available_translations(), [ get_option( 'WPLANG' ) ] );
		$current_code  	= get_prop( $current_lang, [ 'iso', 1 ], 'en' );
		$translations   = explode( ' ', get_prop( $attributes, [ 'translations' ], '' ) );
		$available 		= array_intersect_key( self::get_languages(), array_flip( [ $current_code, ...$translations ] ) );
		$translate_id 	= get_prop( $attributes, [ 'id' ], wp_unique_id( 'wp-translate-' ) );

		switch( get_prop( $attributes, [ 'language' ] ) ) {
			case 'english':
				foreach ( $available as $code => $item ) {
					$choices[$code] = $item['english'];
				} 
			break;
			case 'native':
				foreach ( $available as $code => $item ) {
					$choices[$code] = $item['native'];
				} 
			break;
			default:
				foreach ( $available as $code => $item ) {
					$choices[$code] = strtoupper( $code );
				} 
			break;
		}

		// Installed language 1st
		$target = [ $current_code => $choices[$current_code] ]; 
		unset( $choices[$current_code] ); 
		$choices = array_merge( $target, $choices );

		$switcher = '';
		switch( get_prop( $attributes, [ 'display' ], 'select' ) ) :
			case 'select':
			$switcher = wecodeart_input( 'select', [
				'label'		=> get_prop( $attributes, [ 'label' ] ) ? __( 'Language' ) : null,
				'choices' 	=> $choices,
				'attrs'		=> [
					'class'					=> 'form-select form-select-sm notranslate',
					'data-wp-on--change'	=> 'actions.updateLanguage'
				]
			], false );
			break;
		endswitch;

		$switcher 	= $switcher . sprintf( '<span id="%s" hidden></span>', $translate_id . '-el' );

		\wp_interactivity_state( 'wecodeart/translate', apply_filters( 'wecodeart/filter/interactive/state/translate', [
			'flag'				=> false,
			'flagsUrl'			=> '//flagcdn.com/',
			'pageLanguage'		=> $current_code,
			'includedLanguages' => [] // Default
		] ) );

		\wp_interactivity_config( 'wecodeart/translate', [
			'flag' 				=> 'boolean',
			'flagsUrl' 			=> 'string',
			'pageLanguage' 		=> 'string',
			'includedLanguages'	=> 'array',
		] );  

		return wecodeart( 'dom' )::wrap( 'translate-module', [
			[
				'tag' 	=> 'div',
				'attrs' => $this->get_block_wrapper_attributes( [
					'id' 					=> $translate_id,
					'data-wp-interactive'	=> 'wecodeart/translate',
					'data-wp-context'		=> esc_attr( toJSON( [
						'flag'				=> get_prop( $attributes, [ 'flag' ] ),
						'includedLanguages' => array_keys( $available )
					] ) ),
					'data-wp-init--validate'=> 'callbacks.validateConfig',
					'data-wp-init--setup'	=> 'callbacks.onInit',
					'data-wp-on--mouseenter'=> 'callbacks.loadApi',
					'data-wp-watch'			=> 'callbacks.changeLanguage',
				] )
			]
		], $switcher, [], false );
	}
	
    /**
	 * Add cookies.
	 *
	 * @return  void
	 */
	public function add_cookies(): void {
		if( ! wecodeart( 'support' )->has( 'modules/cookies' ) ) {
			return;
		}

		$cookies = wecodeart( 'support' )->get( 'modules/cookies' )::get_instance();
		$cookies->manager->set( [
			'googtrans' => [
				'duration' 		=> __( 'Session', 'wecodeart' ),
				'description'	=> __( 'This cookie is set by Google Translate API to store language settings.', 'wecodeart' ),
				'category'		=> 'other',
			],
		] ); 
	}

	/**
	 * Add new block editor settings for custom classes.
	 *
	 * @param   array  	$settings 	The editor settings.
	 * @param   object 	$post 		The post being edited.
	 *
	 * @return 	array 	Returns updated editors classes suggestions.
	 */
	public function add_translations( array $settings, $post ): array {
		if ( ! isset( $settings[ 'translations' ] ) ) {
			$settings['translations'] = self::get_languages();
		}

		return $settings;
	}

	/**
	 * Get languages.
	 *
	 * @return 	array
	 */
	public static function get_languages(): array {
		return apply_filters( 'wecodeart/support/modules/translate/languages', [ 
			'af' => ['native' => 'Afrikaans', 'english' => 'Afrikaans'],
			'sq' => ['native' => 'Shqip', 'english' => 'Albanian'],
			'am' => ['native' => 'አማርኛ', 'english' => 'Amharic'],
			'ar' => ['native' => 'العربية', 'english' => 'Arabic'],
			'hy' => ['native' => 'Հայերեն', 'english' => 'Armenian'],
			'az' => ['native' => 'Azərbaycanca', 'english' => 'Azerbaijani'],
			'eu' => ['native' => 'Euskara', 'english' => 'Basque'],
			'be' => ['native' => 'Беларуская мова', 'english' => 'Belarusian'],
			'bn' => ['native' => 'বাংলা', 'english' => 'Bengali'],
			'bs' => ['native' => 'Bosanski', 'english' => 'Bosnian'],
			'bg' => ['native' => 'Български', 'english' => 'Bulgarian'],
			'ca' => ['native' => 'Català', 'english' => 'Catalan'],
			'ceb' => ['native' => 'Cebuano', 'english' => 'Cebuano'],
			'ny' => ['native' => 'Chichewa', 'english' => 'Chichewa'],
			'zh-CN' => ['native' => '简体中文', 'english' => 'Chinese (Simplified)'],
			'zh-TW' => ['native' => '繁體中文', 'english' => 'Chinese (Traditional)'],
			'co' => ['native' => 'Corsu', 'english' => 'Corsican'],
			'hr' => ['native' => 'Hrvatski', 'english' => 'Croatian'],
			'cs' => ['native' => 'Čeština', 'english' => 'Czech'],
			'da' => ['native' => 'Dansk', 'english' => 'Danish'],
			'nl' => ['native' => 'Nederlands', 'english' => 'Dutch'],
			'en' => ['native' => 'English', 'english' => 'English'],
			'eo' => ['native' => 'Esperanto', 'english' => 'Esperanto'],
			'et' => ['native' => 'Eesti', 'english' => 'Estonian'],
			'tl' => ['native' => 'Filipino', 'english' => 'Filipino'],
			'fi' => ['native' => 'Suomi', 'english' => 'Finnish'],
			'fr' => ['native' => 'Français', 'english' => 'French'],
			'fy' => ['native' => 'Frysk', 'english' => 'Frisian'],
			'gl' => ['native' => 'Galego', 'english' => 'Galician'],
			'ka' => ['native' => 'ქართული', 'english' => 'Georgian'],
			'de' => ['native' => 'Deutsch', 'english' => 'German'],
			'el' => ['native' => 'Ελληνικά', 'english' => 'Greek'],
			'gu' => ['native' => 'ગુજરાતી', 'english' => 'Gujarati'],
			'ht' => ['native' => 'Kreyol ayisyen', 'english' => 'Haitian Creole'],
			'ha' => ['native' => 'Harshen Hausa', 'english' => 'Hausa'],
			'haw' => ['native' => 'ʻŌlelo Hawaiʻi', 'english' => 'Hawaiian'],
			'iw' => ['native' => 'עִבְרִית', 'english' => 'Hebrew'],
			'hi' => ['native' => 'हिन्दी', 'english' => 'Hindi'],
			'hmn' => ['native' => 'Hmong', 'english' => 'Hmong'],
			'hu' => ['native' => 'Magyar', 'english' => 'Hungarian'],
			'is' => ['native' => 'Íslenska', 'english' => 'Icelandic'],
			'ig' => ['native' => 'Igbo', 'english' => 'Igbo'],
			'id' => ['native' => 'Bahasa Indonesia', 'english' => 'Indonesian'],
			'ga' => ['native' => 'Gaeilge', 'english' => 'Irish'],
			'it' => ['native' => 'Italiano', 'english' => 'Italian'],
			'ja' => ['native' => '日本語', 'english' => 'Japanese'],
			'jw' => ['native' => 'Basa Jawa', 'english' => 'Javanese'],
			'kn' => ['native' => 'ಕನ್ನಡ', 'english' => 'Kannada'],
			'kk' => ['native' => 'Қазақ тілі', 'english' => 'Kazakh'],
			'km' => ['native' => 'ភាសាខ្មែរ', 'english' => 'Khmer'],
			'ko' => ['native' => '한국어', 'english' => 'Korean'],
			'ku' => ['native' => 'كوردی', 'english' => 'Kurdish (Kurmanji)'],
			'ky' => ['native' => 'Кыргызча', 'english' => 'Kyrgyz'],
			'lo' => ['native' => 'ລາວ', 'english' => 'Lao'],
			'la' => ['native' => 'Latin', 'english' => 'Latin'],
			'lv' => ['native' => 'Latviešu valoda', 'english' => 'Latvian'],
			'lt' => ['native' => 'Lietuvių kalba', 'english' => 'Lithuanian'],
			'lb' => ['native' => 'Lëtzebuergesch', 'english' => 'Luxembourgish'],
			'mk' => ['native' => 'Македонски јазик', 'english' => 'Macedonian'],
			'mg' => ['native' => 'Malagasy', 'english' => 'Malagasy'],
			'ms' => ['native' => 'Bahasa Melayu', 'english' => 'Malay'],
			'ml' => ['native' => 'മലയാളം', 'english' => 'Malayalam'],
			'mt' => ['native' => 'Maltese', 'english' => 'Maltese'],
			'mi' => ['native' => 'Te Reo Māori', 'english' => 'Maori'],
			'mr' => ['native' => 'मराठी', 'english' => 'Marathi'],
			'mn' => ['native' => 'Монгол', 'english' => 'Mongolian'],
			'my' => ['native' => 'မြန်မာဘာသာ', 'english' => 'Myanmar (Burmese)'],
			'ne' => ['native' => 'नेपाली', 'english' => 'Nepali'],
			'no' => ['native' => 'Norsk bokmål', 'english' => 'Norwegian'],
			'ps' => ['native' => 'پښتو', 'english' => 'Pashto'],
			'fa' => ['native' => 'فارسی', 'english' => 'Persian'],
			'pl' => ['native' => 'Polski', 'english' => 'Polish'],
			'pt' => ['native' => 'Português', 'english' => 'Portuguese'],
			'pa' => ['native' => 'ਪੰਜਾਬੀ', 'english' => 'Punjabi'],
			'ro' => ['native' => 'Română', 'english' => 'Romanian'],
			'ru' => ['native' => 'Русский', 'english' => 'Russian'],
			'sm' => ['native' => 'Samoan', 'english' => 'Samoan'],
			'gd' => ['native' => 'Gàidhlig', 'english' => 'Scottish Gaelic'],
			'sr' => ['native' => 'Српски језик', 'english' => 'Serbian'],
			'st' => ['native' => 'Sesotho', 'english' => 'Sesotho'],
			'sn' => ['native' => 'Shona', 'english' => 'Shona'],
			'sd' => ['native' => 'سنڌي', 'english' => 'Sindhi'],
			'si' => ['native' => 'සිංහල', 'english' => 'Sinhala'],
			'sk' => ['native' => 'Slovenčina', 'english' => 'Slovak'],
			'sl' => ['native' => 'Slovenščina', 'english' => 'Slovenian'],
			'so' => ['native' => 'Afsoomaali', 'english' => 'Somali'],
			'es' => ['native' => 'Español', 'english' => 'Spanish'],
			'su' => ['native' => 'Basa Sunda', 'english' => 'Sundanese'],
			'sw' => ['native' => 'Kiswahili', 'english' => 'Swahili'],
			'sv' => ['native' => 'Svenska', 'english' => 'Swedish'],
			'tg' => ['native' => 'Тоҷикӣ', 'english' => 'Tajik'],
			'ta' => ['native' => 'தமிழ்', 'english' => 'Tamil'],
			'te' => ['native' => 'తెలుగు', 'english' => 'Telugu'],
			'th' => ['native' => 'ไทย', 'english' => 'Thai'],
			'tr' => ['native' => 'Türkçe', 'english' => 'Turkish'],
			'uk' => ['native' => 'Українська', 'english' => 'Ukrainian'],
			'ur' => ['native' => 'اردو', 'english' => 'Urdu'],
			'uz' => ['native' => 'O‘zbekcha', 'english' => 'Uzbek'],
			'vi' => ['native' => 'Tiếng Việt', 'english' => 'Vietnamese'],
			'cy' => ['native' => 'Cymraeg', 'english' => 'Welsh'],
			'xh' => ['native' => 'isiXhosa', 'english' => 'Xhosa'],
			'yi' => ['native' => 'יידיש', 'english' => 'Yiddish'],
			'yo' => ['native' => 'Yorùbá', 'english' => 'Yoruba'],
			'zu' => ['native' => 'Zulu', 'english' => 'Zulu'],
		] );
	}
}